
{
  "number": 1,
  "category": "html",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Why is it generally a good idea to position CSS <link>'s between <head></head> and JS <script>'s just before </body>?",
  "answers": [
    {"answerText": "To have the CSS ready so the page can render properly yet not try to execute the JS until the page elements have fully rendered", "chosen": false, "correct": true},
    {"answerText": "It doesn't really matter where you put them.", "chosen": false},
    {"answerText": "Because that's just the way we always have done it.", "chosen": false},
    {"answerText": "Because the <link> tag is an empty element.", "chosen": false},
    {"answerText": "Because the Link DOM object represents an HTML <link> element.", "chosen": false}
  ]
}
{
  "number": 2,
  "category": "html",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What does a doctype declaration do?",
  "answers": [
    {"answerText": "The <!DOCTYPE> declaration is not an HTML tag; it is an instruction to the web browser about what version of HTML the page is written in.", "chosen": false, "correct": true},
    {"answerText": "This includes the Data Transfer Delimiter for HTTP methods.", "chosen": false},
    {"answerText": "I don't always need this for the browser to know what version of HTML I am using.", "chosen": false},
    {"answerText": "Specifies the Document Type Definition (DTD) and its version in HTML4.", "chosen": false},
    {"answerText": "HTML 4.01 and HTML 5 both require a reference to the DTD in the doctype declaration.", "chosen": false}
  ]
}
{
  "number": 3,
  "category": "html",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Identify which of the following are all HTML5 elements only?",
  "answers": [
    {"answerText": "article, aside, section, main, nav, aside, summary, time, figure, figcaption, footer, header, mark, details", "chosen": false, "correct": true},
    {"answerText": "aside, article, section, nav, summary, link, head, time", "chosen": false},
    {"answerText": "details, article, main, nav, summary, code, head", "chosen": false},
    {"answerText": "head, li, blockquote, main, section, mark", "chosen": false},
    {"answerText": "mark, article, details, footer, a, i, em", "chosen": false}
  ]
}
{
  "number": 4,
  "category": "css",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is the difference between classes and IDs in CSS?",
  "answers": [
    {"answerText": "Use IDs to target one element, classes to target many elements", "chosen": false, "correct": true},
    {"answerText": "Classes are classier than ids.", "chosen": false},
    {"answerText": "IDs target many elements, classes target one element.", "chosen": false},
    {"answerText": "Both IDs and classes can target either one or many elements.", "chosen": false},
    {"answerText": "It's a matter of best practice to both classes and IDs consistently.", "chosen": false}
  ]
}
{
"number": 5,
"category": "css",
  "assetUrl": "question5",
  "type": "image",
  "question": "Describe how the divs below are floated.",
  "answers": [
    {"answerText": "Box2 and Box3 are floated left inside an enclosing div. Box1 is outside that enclosing div.  Float is cleared before Box4.", "chosen": false, "correct": true},
    {"answerText": "There are no child divs here, only the parent.", "chosen": false},
    {"answerText": "There are five sets of child divs.", "chosen": false},
    {"answerText": "Float is cleared after Box4.", "chosen": false},
    {"answerText": "There's no floating allowed here.", "chosen": false}
  ]
}
{
  "number": 6,
  "category": "css",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What does * { box-sizing: border-box; } do? What are its advantages?",
  "answers": [
    {"answerText": "You don't have to include margin and padding in height/width size percentages in any divs.", "chosen": false, "correct": true},
    {"answerText": "It's the same as for content-box as far as height/width percentage measurements go in any divs.", "chosen": false},
    {"answerText": "The border value for all divs will receive a default value.", "chosen": false},
    {"answerText": "The position value for all divs will be set to absolute.", "chosen": false},
    {"answerText": "The border value for all divs cannot be set dynamically.", "chosen": false}
  ]
}
{
  "number": 7,
  "category": "css",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What's the difference between inline and inline-block and block?",
  "answers": [
    {"answerText": "Inline is default, everything on a single line; inline-block allows elements on line but allows height and width measurements as with block items; block is how divs and sections are treated by default.", "chosen": false, "correct": true},
    {"answerText": "Both inline and inline-block allow height and width measurements; block elements can appear inline.", "chosen": false},
    {"answerText": "They're basically all the same.", "chosen": false},
    {"answerText": "The differences disappear when you give an element height and width values.", "chosen": false},
    {"answerText": "There's virtually no difference between inline and block elements.", "chosen": false}
  ]
}
{
  "number": 8,
  "category": "css",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Describe pseudo-elements and discuss what they are used for.",
  "answers": [
    {"answerText": "A CSS pseudo-element is used to style specified parts of an element. For example, it can be used to: Style the first letter, or line, of an element; Insert content before, or after, the content of an element.", "chosen": false, "correct": true},
    {"answerText": "CSS pseudo-elements should not be used in best practice--only use authentic elements.", "chosen": false},
    {"answerText": "You would not use a pseudo-element to describe the behavior of an element during a hover action.", "chosen": false},
    {"answerText": "You can't use pseudo-elements to target child elements.", "chosen": false},
    {"answerText": "Pseudo-elements are just for applying styles temporarily.", "chosen": false}
  ]
}
{
  "number": 9,
  "category": "js",
  "assetUrl": "question9",
  "type": "image",
  "question": "Here's a class.  How would you instantiate this class?",
  "answers": [
    {"answerText": "const joe = new Person('Joe');", "chosen": false, "correct": true},
    {"answerText": "var joe = Person('Joe')", "chosen": false},
    {"answerText": "let joe = new Person.name('Joe')", "chosen": false},
    {"answerText": "let joe = new Joe.person('name')", "chosen": false},
    {"answerText": "var joe = new Name.person('Joe')", "chosen": false}
  ]
}
{
  "number": 10,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "When would you not use an arrow function rather than a es5 function?",
  "answers": [
    {"answerText": "Defining a method on a prototype object with an arrow function will throw an error.", "chosen": false, "correct": true},
    {"answerText": "There's never a problem using an arrow function on a click handler.", "chosen": false},
    {"answerText": "Go ahead and use an arrow function to define an object method.", "chosen": false},
    {"answerText": "An arrow function is useful anywhere you need 'this' to be defined.", "chosen": false},
    {"answerText": "The context of 'this' is unimportant with arrow functions.", "chosen": false}
  ]
}
{
  "number": 11,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Which of the following is an object:",
  "answers": [
    {"answerText": "{ 1: 'one', 2: 'two', 3: 'three'}", "chosen": false, "correct": true},
    {"answerText": "{ 1; 'one', 2; 'two', 3; 'three'}", "chosen": false},
    {"answerText": "{ 'one' '1', 'two' '2', 'three' '3'}", "chosen": false},
    {"answerText": "{ '1', one; '2', two; '3', three}", "chosen": false},
    {"answerText": "{one '1', two '2', three '3'}", "chosen": false}
  ]
}
{
  "number": 12,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is event delegation and event bubbling?",
  "answers": [
    {"answerText": "Event delegation refers to the process of using event propagation (bubbling) to handle events at a higher level in the DOM than the element on which the event originated. It allows us to attach a single event listener for elements that exist now or in the future.", "chosen": false, "correct": true},
    {"answerText": "You have to use event.target on each child element for the parent to know which child got the event action.", "chosen": false},
    {"answerText": "Bubbling refers to parent elements and delegation refers to child elements.", "chosen": false},
    {"answerText": "Don't worry, this never happens in JavaScript.", "chosen": false},
    {"answerText": "Event delegation and event bubbling have nothing to do with each other.", "chosen": false}
  ]
}
{
  "number": 13,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is hoisting?",
  "answers": [
    {"answerText": "Hoisting is the JavaScript interpreter's action of moving all variable and function declarations to the top of the current scope. However, only the actual declarations are hoisted", "chosen": false, "correct": true},
    {"answerText": "Variable initialized values are hoisted to the top of the current scope also.", "chosen": false},
    {"answerText": "All variables and function names become accessible in the global namespace.", "chosen": false},
    {"answerText": "Hoisting was a term coined by Brandon Eich in a bar after a conference.", "chosen": false},
    {"answerText": "Hoisting referes to variable and function names being undefined until they are initialized.", "chosen": false}
  ]
}
{
  "number": 14,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is the difference between =, ==, and ===?",
  "answers": [
    {"answerText": "Assignment, comparison without type check, comparison with type check.", "chosen": false, "correct": true},
    {"answerText": "== and === are really the same thing, = is just for assignment.", "chosen": false},
    {"answerText": "== is an assignment of a value, and = means two items are equal.", "chosen": false},
    {"answerText": "=== is only the same as == when the things being compared are strings.", "chosen": false},
    {"answerText": "== is only the same as === when the things being compared are not strings.", "chosen": false}
  ]
}
{
  "number": 15,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Which is an example of Promise in jQuery.",
  "answers": [
    {"answerText": "$( 'div' ).promise().done(function() { $( 'p' ).append( ' Finished! ' ); });", "chosen": false},
    {"answerText": "var div = $( '<div>' ); div.promise().done( ( arg1 ) => {  alert( this === div && arg1 === div ); });", "chosen": false},
    {"answerText": "var promise = $.ajax({ url: '/serverEndpoint'}); promise.done(successFunction); promise.fail(errorFunction); promise.always(alwaysFunction);", "chosen": false},
    {"answerText": "var promise = $.ajax({ url: '/serverEndpoint'}); promise.then(successFunction, errorFunction);", "chosen": false},
    {"answerText": "All of these answers.", "chosen": false, "correct": true}
  ]
}
{
  "number": 16,
  "category": "js",
  "assetUrl": "question16",
  "type": "image",
  "question": "In the example below, what would the expected output be for b?",
  "answers": [
    {"answerText": "hey", "chosen": false, "correct": true},
    {"answerText": "uh oh", "chosen": false},
    {"answerText": "undefined", "chosen": false},
    {"answerText": "[Function: myFunc]", "chosen": false},
    {"answerText": "[Function: myFunc()]", "chosen": false}
  ]
}
{
  "number": 17,
  "category": "js",
  "assetUrl": "https://www.youtube.com/embed/8aGhZQkoFbQ?start=768&end=894",
  "type": "videoSnippet",
  "question": "What is this snippet explaining about Node.js?",
  "answers": [
    {"answerText": "How the event loop works with the call stack and the task queue.", "chosen": false, "correct": true},
    {"answerText": "How the browser api populates the call stack when it completes a task.", "chosen": false},
    {"answerText": "How the call stack hands off to the event loop.", "chosen": false},
    {"answerText": "How the task queue hands off to the web api.", "chosen": false},
    {"answerText": "That Philip Roberts has amazing hair.", "chosen": false}
  ]
}
{
  "number": 18,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is an IIFE?",
  "answers": [
    {"answerText": "An immediately-invoked function expression (or IIFE, pronounced \"iffy\") is a JavaScript programming language idiom which produces a lexical scope using JavaScript's function scoping.", "chosen": false, "correct": true},
    {"answerText": "An asynchronous function that depends on a condition being true.", "chosen": false},
    {"answerText": "Internally Fixed Functional Expression.", "chosen": false},
    {"answerText": "Instantly Fired Functional Expression.", "chosen": false},
    {"answerText": "Sort of like a wedgie only less certain.", "chosen": false}
  ]
}
{
  "number": 19,
  "category": "js",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is the difference between passing by value and passing by reference?",
  "answers": [
    {"answerText": "Pass by reference is passing a reference to a memory location, where as passing by value is passing the actual value stored in the memory location.", "chosen": false, "correct": true},
    {"answerText": "You can pass a pre-declared array or object by value, but not by reference.", "chosen": false},
    {"answerText": "Primitive values are always passed by reference.", "chosen": false},
    {"answerText": "If two arrays contain the same values, the arrays are equal.", "chosen": false},
    {"answerText": "JSON.stringify can be useful in comparing the values of two arrays, because arrays are passed by value.", "chosen": false}
  ]
}
{
  "number": 20,
  "category": "js",
  "assetUrl": "question20",
  "type": "image",
  "question": "Identify the callback in this example:",
  "answers": [
    {"answerText": "It's the ES6 style function with the rocket operator that's called by map.", "chosen": false, "correct": true},
    {"answerText": "It's the ...comment inside the braces.", "chosen": false},
    {"answerText": "It's the map function invoked on userComments.", "chosen": false},
    {"answerText": "It's the first argument before the rocket operator.", "chosen": false},
    {"answerText": "It's the rocket operator itself.", "chosen": false}
  ]
}
{
  "number": 21,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What's the difference between import/export and require/module.exports?",
  "answers": [
    {"answerText": "Require/module.exports is CommonJS and import/export is ES6.", "chosen": false, "correct": true},
    {"answerText": "There is no difference, it's all transpiled by Babel.", "chosen": false},
    {"answerText": "import() in ES6 is a function and import in CommonJS is the same, .", "chosen": false},
    {"answerText": "As recently as a year ago (2017), import/export had a significant performance advantage.", "chosen": false},
    {"answerText": "There's never a memory advantage to selectively using named imports from ES6.", "chosen": false}
  ]
}
{
  "number": 22,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Name three module systems available in Node.js",
  "answers": [
    {"answerText": "AMD (Asynchronous Module Definition), CommonJS, and ES6 or ES2015 Modules", "chosen": false, "correct": true},
    {"answerText": "Backbone.js, React.js, and ES2015 Modules", "chosen": false},
    {"answerText": "System.js, Node.js, and Vue.js", "chosen": false},
    {"answerText": "Postman, Require, Underscore.js", "chosen": false},
    {"answerText": "Lunar Modules, Solar Modules, and Terran Modules", "chosen": false}
  ]
}
{
  "number": 23,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Why does console.log in a node file output to terminal instead of the console in the browser?",
  "answers": [
    {"answerText": "Because the Node command is not happening inside the browser.", "chosen": false, "correct": true},
    {"answerText": "Because there's a special switch in the browser for this output.", "chosen": false},
    {"answerText": "Because Node is only compatable with some browsers.", "chosen": false},
    {"answerText": "The output comes asychronously, so you don't see it in the browser until later.", "chosen": false},
    {"answerText": "You can see it in the Apache webserver logs.", "chosen": false}
  ]
}
{
  "number": 24,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "In `require('./express')`, what is express?",
  "answers": [
    {"answerText": "An instruction to import a module depedency.", "chosen": false, "correct": true},
    {"answerText": "A development method.", "chosen": false},
    {"answerText": "An instruction to Node to be quick about it!", "chosen": false},
    {"answerText": "A development environment.", "chosen": false},
    {"answerText": "An interpreter for HTTP methods.", "chosen": false}
  ]
}
{
  "number": 25,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What filename contains all the module dependencies in a project?",
  "answers": [
    {"answerText": "package.json", "chosen": false, "correct": true},
    {"answerText": "server.js", "chosen": false},
    {"answerText": "store.js", "chosen": false},
    {"answerText": "gulpfile.js", "chosen": false},
    {"answerText": "config.js", "chosen": false}
  ]
}
{
  "number": 26,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Would gulp be a development depenency or a production dependency?",
  "answers": [
    {"answerText": "A development dependency because it's not required by the production server.", "chosen": false, "correct": true},
    {"answerText": "A production dependency because it runs on the server.", "chosen": false},
    {"answerText": "Gulp is how everyone should do it, so it's a production dependency!", "chosen": false},
    {"answerText": "Grunt and Broccoli are better, but all three are required in production.", "chosen": false},
    {"answerText": "Just use Rhino in production and be done with it.", "chosen": false}
  ]
}
{
  "number": 27,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Choose the correct pair",
  "answers": [
    {"answerText": "require/module.exports", "chosen": false},
    {"answerText": "import {module} from './module' /export default module", "chosen": false},
    {"answerText": "import/export", "chosen": false},
    {"answerText": "const {module} = require('./modulename')/export {module}", "chosen": false},
    {"answerText": "They're all correct", "chosen": false, "correct": true}
  ]
}
{
  "number": 28,
  "category": "node",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What's the difference between const {myObj} = require('./filename') and const myObj = require('./filename')",
  "answers": [
    {"answerText": "{myObj} is a named export that does not require a default export", "chosen": false, "correct": true},
    {"answerText": "('./filename') can export other functions without naming them.", "chosen": false},
    {"answerText": "A module can export multiple default functions or classes.", "chosen": false},
    {"answerText": "The curly braces have nothing to do with named exports.", "chosen": false},
    {"answerText": "Named exports are never required or useful in JavaScript.", "chosen": false}
  ]
}
{
  "number": 29,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is Mongoose?",
  "answers": [
    {"answerText": "Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.", "chosen": false, "correct": true},
    {"answerText": "Mongoose is the key component in the Cobra toolchain.", "chosen": false},
    {"answerText": "It's another database just like MongoDB.", "chosen": false},
    {"answerText": "It's part of Express.js middleware.", "chosen": false},
    {"answerText": "It's part of the npm framework of mystery and deception.", "chosen": false}
  ]
}
{
  "number": 30,
  "category": "api",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What does REST mean in RESTful API?",
  "answers": [
    {"answerText": "Representational State Transfer, where state is transferred as an object.", "chosen": false, "correct": true},
    {"answerText": "It means have compassion and don't work too hard--take breaks often.", "chosen": false},
    {"answerText": "Relatively Synchronous Transfer of a state object.", "chosen": false},
    {"answerText": "Relational State Transfer, where state is transferred as an object.", "chosen": false},
    {"answerText": "That the DOM always remembers what it looked like 10 minutes ago.", "chosen": false}
  ]
}
{
  "number": 31,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is one advantage to a non-relational database over a relational database?",
  "answers": [
    {"answerText": "The database schema can be flexible and change without changing the relationships between tables, as it would with a relational database.", "chosen": false, "correct": true},
    {"answerText": "Relational databases relate better with human beings, while non-relational databases are for loners.", "chosen": false},
    {"answerText": "Nonrelational databases are always faster than relational databases.", "chosen": false},
    {"answerText": "Relational databases allow more flexibility in the in how one table of data relates to another table of data.", "chosen": false},
    {"answerText": "Nonrelational databases depend on data being in tables and rows format.", "chosen": false}
  ]
}
{
  "number": 32,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What's the difference between SQL and Non-SQL databases at a high level?",
  "answers": [
    {"answerText": "SQL databases store data in tables and rows using relational algebra; noSQL databases store data in collections of JSON documents", "chosen": false, "correct": true},
    {"answerText": "You never have to whiteboard your data models with noSQL databases.", "chosen": false},
    {"answerText": "Both SQL and NoSQL databases use relational algebra.", "chosen": false},
    {"answerText": "SQL databases handle JSON objects better than NoSQL databases.", "chosen": false},
    {"answerText": "Both are equal in handling schemas that must be constantly de-normalized.", "chosen": false}
  ]
}
{
  "number": 33,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What types of NoSQL databases are there?",
  "answers": [
    {"answerText": "Document-oriented, key-value, graph, column-oriented", "chosen": false, "correct": true},
    {"answerText": "Object-oriented, tabular, row-oriented, binary", "chosen": false},
    {"answerText": "Textual, UNIX-style, Microsoft, Apple", "chosen": false},
    {"answerText": "Command line, web-driven, and server side", "chosen": false},
    {"answerText": "DOM-friendly, UNIX-style, server-centric, and open source", "chosen": false}
  ]
}
{
  "number": 34,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What kind of NoSQL database is MongoDB?",
  "answers": [
    {"answerText": "Document-oriented", "chosen": false, "correct": true},
    {"answerText": "key-value", "chosen": false},
    {"answerText": "graph", "chosen": false},
    {"answerText": "column-oriented", "chosen": false},
    {"answerText": "real-time", "chosen": false}
  ]
}
{
  "number": 35,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is a namespace in MongoDB?",
  "answers": [
    {"answerText": "The namespace is a combination of the database name and the name of the collection or index...", "chosen": false, "correct": true},
    {"answerText": "The place that holds all the object ids.", "chosen": false},
    {"answerText": "A namespace is where only variable names that have been hoisted reside.", "chosen": false},
    {"answerText": "Event names that have been propagated wind up in the MongoDBs namespace.", "chosen": false},
    {"answerText": "This is where the names of the authors of MongoDB are kept.", "chosen": false}
  ]
}
{
  "number": 36,
  "category": "mongo",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What is the ObjectID composed of for a MongoDB record?",
  "answers": [
    {"answerText": "Timestamp, Client Machine ID, Client process ID, 3 byte incremented counter", "chosen": false, "correct": true},
    {"answerText": "Completely random numbers and characters", "chosen": false},
    {"answerText": "The current year, Mongo version, partial Microsoft license number", "chosen": false},
    {"answerText": "Language code, CPU archetecture, country code", "chosen": false},
    {"answerText": "Collection name, random string of numbers, timestamp", "chosen": false}
  ]
}
{
  "number": 37,
  "category": "api",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What are the two types of API functions in Node?",
  "answers": [
    {"answerText": "blocking and non-blocking", "chosen": false, "correct": true},
    {"answerText": "asynchronous and non-blocking", "chosen": false},
    {"answerText": "blocking and synchronous", "chosen": false},
    {"answerText": "synchronous and asynchronous", "chosen": false},
    {"answerText": "good and bad", "chosen": false}
  ]
}
{
  "number": 38,
  "category": "api",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What are endpoints?",
  "answers": [
    {"answerText": "Part of the URL after the domain where the router hands the browser to a different program on the website. ", "chosen": false, "correct": true},
    {"answerText": "That's where the API stops.", "chosen": false},
    {"answerText": "The browser URL uses endpoints for server side PHP programs--endpoints don't apply to other server side languages.", "chosen": false},
    {"answerText": "Endpoints are where the server and the client share only JSON data.", "chosen": false},
    {"answerText": "They have something to do with the URL and that back-end server stuff.", "chosen": false}
  ]
}
{
  "number": 39,
  "category": "api",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "Why would I use Postman?",
  "answers": [
    {"answerText": "To test an API's logic before you have the front-end client working with the back-end server.", "chosen": false, "correct": true},
    {"answerText": "To mail your Christmas cards or send Seasons Greetings.", "chosen": false},
    {"answerText": "Postman is a terrific email client.", "chosen": false},
    {"answerText": "Postman helps you with HTTP POST methods.", "chosen": false},
    {"answerText": "Because Postman dropped the MIT license and now it's a commercial success.", "chosen": false}
  ]
}
{
  "number": 40,
  "category": "api",
  "assetUrl": null,
  "type": "multipleChoice",
  "question": "What HTTP methods are supported by REST?",
  "answers": [
    {"answerText": "GET,POST,PUT,DELETE,OPTIONS,HEAD", "chosen": false, "correct": true},
    {"answerText": "OPTIONS,CALLS,PUTS,POSTS", "chosen": false},
    {"answerText": "GETONE, GETMANY, FIND, POST", "chosen": false},
    {"answerText": "RUNAWAY, COMEBACK, GOHOME, STAYHERE", "chosen": false},
    {"answerText": "DELETE,CREATE,MODIFY,ENDSERVER", "chosen": false}
  ]
}
